#!/usr/bin/env python3
"""
process_noes

Read in an NOE spreadsheet and determine which NOEs are symmetric and to which
signatures each NOE passing symmetry can be clustered. This also requires a 2D
peaklist and a structure, which will be used by the constraint satisfaction
solver to determine which explanations of the network are reasonable
"""

import argparse
import camera.hmqc as hmqc
import camera.noes as noes
import camera.ground as ground
import camera.params as params
import camera.network as network
import camera.structures as structures
import camera.symmetrize as symmetrize


def get_args():
    """
    Parse command line arguments
    """

    # Create a command line argument parser and add arguments to it
    parser = argparse.ArgumentParser(description=__doc__.strip())
    parser.add_argument("hmqc", help="2D peak list (.csv)")
    parser.add_argument("noes", help="NOE spreadsheet (.csv)")
    parser.add_argument("structure", help="predicted NOE file (.json)")
    parser.add_argument("-r", "--radius", type=float, default=10.,
                        help="Maximum noe distance")
    parser.add_argument("--added-radius", type=float, default=12.,
                        help="Maximum noe distance for added methyls")
    parser.add_argument("--mcs", type=int, default=3,
                        help="Maximum connected component size of the "
                             "symmetrization graph to use in CSP")
    parser.add_argument("--sym-tol", nargs=2, type=float,
                        default=[0.15, 0.02], help="symmetry tolerances")
    parser.add_argument("--clustering-tol", nargs=2, type=float,
                        default=[0.15, 0.02], help="clustering tolerances")
    parser.add_argument("--fa", action="store_true", help="force assignments")
    parser.add_argument("--fo", action="store_true", help="force options")
    parser.add_argument("-o", "--output", help="Output NOE .csv file")

    args = parser.parse_args()

    # Update globals that are set from command line args

    params.RADIUS = args.radius
    params.ADDED_RADIUS = args.added_radius
    params.MAX_COMP_SIZE = args.mcs
    params.SYM_CTOL, params.SYM_HTOL = args.sym_tol
    params.CLS_CTOL, params.CLS_HTOL = args.clustering_tol
    params.FORCE_ASG = args.fa
    params.FORCE_SV = args.fo

    # Return the command line argument namespace
    return args


def main():
    """
    Main method for the script
    """

    # Parse command line arguments for the script
    args = get_args()

    # Read in list of HMQC signatures
    signatures = hmqc.parse_hmqc_file(args.hmqc)

    # Read in list of NOEs
    crosspeaks = noes.parse_noe_file(args.noes)

    # Get possible clusters for each crosspeak
    noes.set_clusters(crosspeaks, signatures)
    noes.set_reciprocals(crosspeaks)

    # Ignore any unclusterable crosspeaks
    crosspeaks = [c for c in crosspeaks if c.clusters]

    # Construct an NOE network from the given crosspeaks
    symgraph = network.SymGraph(crosspeaks, True)
    symgraph.histogram()

    # Read in structure
    structure = structures.load_structure(args.structure)

    # Set the assignments and options sets for the signatures
    hmqc.set_assignment(signatures, structure)

    # Set the activity level to components of size <=2
    symgraph.set_activity_level(args.mcs)

    # Check that ground truth is respected
    ground.check_network(symgraph, structure)

    # Create SAT formula for clustering CSP
    symmetrize.reduce_symmetrization_graph(symgraph, signatures, structure)

    symgraph.histogram()

    # Write out NOE CSV file with reciprocal and clusters added
    if args.output:
        symgraph.to_csv(args.output)


# Run the main method for the script
if __name__ == "__main__":
    main()
